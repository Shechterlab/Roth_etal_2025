knitr::opts_chunk$set(tidy.opts=list(width.cutoff=100), tidy=TRUE)
library(DEP2)
library(dplyr)
library(tidyverse)
library(rio)
library(ggplot2)
library(viridisLite)
library(kableExtra)
library(knitr)
library(enrichplot)
library(clusterProfiler)
library(GOSemSim)
library(enrichplot)
# Ensure the output directory exists, if not make it
output_dir <- params$output_dir
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Function to read data based on file extension
read_data <- function(file) {
ext <- tools::file_ext(file)
switch(ext,
csv = read.csv(file, header = TRUE),
tsv = read_tsv(file),
txt = read_tsv(file),
xlsx = read_excel(file),
stop("Unsupported file type"))
}
# Load the protein data file
data <- read_data(params$protein_data_file)
# Convert NAs to 0 and select relevant columns (e.g. the data columns all need to have an underscore which indicates that they have replicates)
data[, grep('_', colnames(data))][is.na(data[, grep('_', colnames(data))])] <- 0
# Filter the data dataframe to keep only the columns that match "Description", "Accession", "Symbol", or those containing underscores (_), makes it smaller
data <- data[c(grep('Description|Accession|Symbol|_', colnames(data)))]
# If the "Symbol" column exists, assign the values of the "Symbol" column to the "Description" column.
#If the "Symbol" column does not exist, extract the gene name from the "Description" column using a regular expression. This expression looks for the text after GN= and before the next space, and assigns it to the "Description" column.
if ("Symbol" %in% colnames(data)) {
data$Description <- data$Symbol
} else {
data$Description <- sub(".*GN=([^[:space:]]+).*", "\\1", data$Description)
}
# Load the experimental design file
experimental_design <- read.csv(params$experimental_design_file, header = TRUE)
# Ensure unique protein names
data.unique <- make_unique(data, "Description", "Accession", delim = ";")
# Generate a SummarizedExperiment object
data_se <- make_se(data.unique, grep("_([^_]+)$", colnames(data)), experimental_design)
# Make sure all NAs are gone
NAiszero(data_se)
#Order columns
#Order contrasts, first split the params column order
#params$column_order  column_order <- unlist(strsplit(params$column_order, ",\\s*"))
#  Order_cols(data_se, column_order , order_column = "condition")
knit_print(paste0("## DATA QC ##"))
# Plot the frequency of identified proteins across samples
plot_frequency(data_se)
# Filter the data based on the parameters
data_filt <- filter_se(data_se, thr = params$threshold_for_filtering, fraction = params$fraction_filtered)
# Plot the frequency of identified proteins across samples
plot_frequency(data_filt)
# Plot the number of identified proteins per sample
plot_numbers(data_filt)
# Plot the overlap of protein identifications between samples
plot_coverage(data_filt)
# Plot the missing values across samples
plot_missval(data_filt)
# Plot the intensity distributions before and after normalization
plot_detect(data_filt)
# Normalize the data using variance stabilization
data_norm <- normalize_vsn(data_filt)
# Plot mean versus standard deviation to visualize normalization
meanSdPlot(data_norm)
# Visualize normalization by boxplots for all samples before and after normalization
plot_normalization(data_filt, data_norm)
# Identify proteins with missing values in all replicates of at least one condition
proteins_MNAR <- get_df_long(data_norm) %>%
group_by(name, condition) %>%
summarize(NAs = all(is.na(intensity))) %>%
filter(NAs) %>%
pull(name) %>%
unique()
MNAR <- names(data_norm) %in% proteins_MNAR
# Split the imputation methods parameter into a list
imputation_methods <- strsplit(params$imputation_methods, ",")[[1]]
# ID each individual parameter (if 2)
method_parts <- strsplit(imputation_methods, "_")[[1]]
#Determine if single or mixed imputation
if (length(method_parts) == 1) {
imputed_se <- impute(data_norm, fun = method_parts[1])
} else if (length(method_parts) == 2) {
imputed_se <- impute(data_norm, fun = "mixed", randna = !MNAR, mar = method_parts[1], mnar = method_parts[2])
}
# Dynamically name the imputed SummarizedExperiment object
assign(paste0("imputed_se_", imputation_methods), imputed_se)
cat("## Data Imputation Method: ", imputation_methods, "##\n")
imputed_se <- get(paste0("imputed_se_", imputation_methods))
imp_plot <- plot_imputation(data_filt, data_norm, imputed_se)
print(imp_plot)
# Function to perform differential enrichment analysis
DE_analysis <- function(se, fdr.type = params$fdr_correction, lfc = params$log2fc_cutoff, alpha = params$threshold_cutoff, thresholdmethod = params$threshold_method ) {
result <- se %>%
test_diff(type = "all", fdr.type = fdr.type) %>%
add_rejections(lfc = lfc, alpha = alpha, thresholdmethod = params$threshold_method)
return(result)
}
# Perform Differential Expression Test
cat("### Imputation Method:", imputation_methods, "###\n")
cat("FDR Correction:", params$fdr_correction, "\n")
de_se <- test_diff(imputed_se, type = "all", fdr.type = params$fdr_correction)
de_se <- add_rejections(de_se, lfc = params$log2fc_cutoff, alpha = params$threshold_cutoff, thresholdmethod = params$threshold_method)
cat("P-val Histogram")
# generate a results table for subsequent analysis
data_results <- get_results(de_se)
# Also Generate a wide data.frame
df_wide <- get_df_wide(de_se)
# Generate lists of all contrasts
contrasts <- get_contrast(de_se)
#  contrasts <- c("DMSO.CHR_vs_DMSO.CYTO","DMSO.CHR_vs_DMSO.NUC", "DMSO.NUC_vs_DMSO.CYTO", "GSK.48H.CHR_vs_GSK.48H.CYTO", "GSK.48H.CHR_vs_DMSO.NUC")
# Loop through each contrast and generate a p-value histogram
for (contrast in contrasts) {
# Extract p-values for the current contrast
p_values <- df_wide[[paste0(contrast, "_p.val")]]
# Create the p-value histogram
pvalue_histogram <- ggplot(data.frame(p_values), aes(x = p_values)) +
geom_histogram(binwidth = 0.05, fill = "gray", color = "black") +
theme_minimal() +
labs(title = paste("P-value Distribution for", contrast), x = "P-value", y = "Frequency")
# Print the p-value histogram
print(pvalue_histogram)
}
cat("\n---\n")
cat("### Imputation Method:", imputation_methods, "###\n")
# Principal Component Analysis
pca_plot <- plot_pca(de_se, x = 1, y = 2, n = 500, point_size = 4) + ggtitle(paste("PCA -", imputation_methods))
print(pca_plot)
#######################################################################
# Correlation plot
cor_plot <- plot_cor(de_se, lower = 0, upper = 1, pal = "Blues")
#print(cor_plot)
# Distance plot
dist_plot <- plot_dist(de_se)
# print(dist_plot)
#######################################################################
#######################################################################
# Heatmap
heatmap_plot <- plot_heatmap(de_se, type = "centered", kmeans = TRUE, k = params$n_clusters, col_limit = 5, show_row_names = TRUE, clustering_distance = "kendall", seed = 123, cluster_column = F)
# print(heatmap_plot)
#save Heatmap
if (params$save_output) {
heatmap_filename <- file.path(paste0("Heatmap_", params$name, "_Imputation-", imputation_methods, "_Cutoff-", params$threshold_cutoff, "_StatTest-", params$fdr_correction, "_DEP2.pdf"))
pdf(heatmap_filename, width = 10, height = 8)
print(heatmap_plot)
dev.off()
}
#if (params$perform_post_analysis) {
#############GO
#res_ora_GO <- DEP2::test_ORA(de_se, by_contrast = T, contrasts = c("DMSO.NUC_vs_DMSO.CYTO",  "GSK.48H.NUC_vs_GSK.48H.CYTO", "DMSO.CHR_vs_DMSO.CYTO", "GSK.48H.CHR_vs_GSK.48H.CYTO", "DMSO.CHR_vs_DMSO.NUC", "GSK.48H.CHR_vs_GSK.48H.NUC"), species = "Human", type = "GO")
res_ora_GO <- DEP2::test_ORA(de_se, by_contrast = T, contrasts = c("GSK.48H.CHR_vs_DMSO.CHR"), species = "Human", type = "GO")
res_ora_GO_filt_ALL <- get_ORA_result(res_ora_GO, ont ="GOALL", pvalueCutoff = 0.05, simplify = TRUE, simplify.cutoff = 0.7)
res_ora_GO_filt_BP <- get_ORA_result(res_ora_GO, ont ="BP", pvalueCutoff = 0.05, simplify = TRUE, simplify.cutoff = 0.7)
res_ora_GO_filt_MF <- get_ORA_result(res_ora_GO, ont ="MF", pvalueCutoff = 0.1, simplify = TRUE, simplify.cutoff = 0.6)
enrich_plotGO_ALL <- enrichplot::dotplot(res_ora_GO_filt_ALL)
enrich_plotGO_BP <- enrichplot::dotplot(res_ora_GO_filt_BP)
enrich_plotGO_MF <- enrichplot::dotplot(res_ora_GO_filt_MF)
print(enrich_plotGO_ALL)
print(enrich_plotGO_BP)
print(enrich_plotGO_MF)
if (params$save_output) {
enrich_plotGO_filename <- file.path(paste0("clusterProfilerGO_", params$name, "_Imputation-", imputation_methods, "_Cutoff-", params$threshold_cutoff, "_StatTest-", params$fdr_correction, "_DEP2.pdf"))
pdf("enrich_plotGO-fractionsNuc-vs-Chr-vs-Cyto_DMSOvsGSK-Biological Process.pdf", width = 12, height = 8)
print(enrich_plotGO_BP)
dev.off()
}
#############KEGG
res_ora_KEGG <- DEP2::test_ORA(de_se, by_contrast = T, contrasts = c("DMSO.NUC_vs_DMSO.CYTO",  "GSK.48H.NUC_vs_GSK.48H.CYTO", "DMSO.CHR_vs_DMSO.CYTO", "GSK.48H.CHR_vs_GSK.48H.CYTO"), species = "Human", type = "KEGG")
enrich_plotKEGG <-enrichplot::dotplot(res_ora_KEGG)
print(enrich_plotKEGG)
if (params$save_output) {
enrich_plotKEGG_filename <- file.path(output_dir,"\\", paste0("clusterProfilerKEGG_", params$name, "_Imputation-", imputation_methods, "_Cutoff-", params$threshold_cutoff, "_StatTest-", params$fdr_correction, "_DEP2.pdf"))
pdf(enrich_plotKEGG_filename, width = 12, height = 8)
print(enrich_plotKEGG)
dev.off()
}
